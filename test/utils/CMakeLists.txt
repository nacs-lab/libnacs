#

function(add_utils_test target)
  cmake_parse_arguments(UTILS_TEST "NOTEST;EXCLUDE;STATIC" "" "" ${ARGN})
  if(UTILS_TEST_UNPARSED_ARGUMENTS)
    set(SOURCES ${UTILS_TEST_UNPARSED_ARGUMENTS})
  else()
    set(SOURCES "test_${target}.cpp")
  endif()
  add_executable(test-${target} ${SOURCES})
  if(UTILS_TEST_STATIC AND BUILD_STATIC_LIB)
    target_link_libraries(test-${target} nacs-utils-static Catch2::Catch2)
  else()
    target_link_libraries(test-${target} nacs-utils Catch2::Catch2)
  endif()
  if(NOT UTILS_TEST_NOTEST)
    if(UTILS_TEST_EXCLUDE)
      add_test(NAME test/excluded/utils/${target} COMMAND test-${target})
    else()
      add_test(NAME test/normal/utils/${target} COMMAND test-${target})
    endif()
  endif()
endfunction()

add_utils_test(anyptr)
add_utils_test(bits)
add_utils_test(buff_streams)
add_utils_test(const_stream)
add_utils_test(cpu)
add_utils_test(datapipe)
add_utils_test(datareader)
add_utils_test(dl)
# Set export for accessing the symbol in the test
set_property(TARGET test-dl APPEND PROPERTY ENABLE_EXPORTS On)
# Set the include path for openlibm
set_property(TARGET test-dl APPEND PROPERTY
             INCLUDE_DIRECTORIES "${PROJECT_BINARY_DIR}/lib/nacs-utils")
add_utils_test(filterqueue)
add_utils_test(fixedqueue)
add_utils_test(interp)
add_utils_test(zmq_multiclient)
target_link_libraries(test-zmq_multiclient PkgConfig::ZMQ)

foreach(TESTSET RANGE 5)
  add_utils_test(ir-${TESTSET} test_ir.cpp)
  set_target_properties("test-ir-${TESTSET}" PROPERTIES
    COMPILE_DEFINITIONS "IR_TESTSET=${TESTSET}")
endforeach()
add_utils_test(ir_call)
add_utils_test(ir_cmp)
add_utils_test(ir_convert)
add_utils_test(ir_logical)

foreach(TESTSET RANGE 8)
  add_utils_test(ir_cc-${TESTSET} test_ir_cc.cpp)
  set_target_properties("test-ir_cc-${TESTSET}" PROPERTIES
    COMPILE_DEFINITIONS "IR_CC_TESTSET=${TESTSET}")
endforeach()

if(CMAKE_SYSTEM_NAME STREQUAL Linux)
  add_utils_test(phy_addr EXCLUDE)
endif()

add_utils_test(small_alloc)
add_utils_test(syntax_error)
add_utils_test(term)
add_utils_test(thread)
add_utils_test(wavemeter)
add_utils_test(wavemeter2 NOTEST)

if(ENABLE_LLVM)
  function(add_llvm_test target)
    add_utils_test(${ARGV} STATIC)
    set_property(TARGET test-${target} APPEND
      PROPERTY INCLUDE_DIRECTORIES ${LLVM_INCLUDE_DIRS})
    set_property(TARGET test-${target} APPEND_STRING
      PROPERTY COMPILE_FLAGS " ${LLVM_DEFINITIONS} -Wno-conversion")
    if(NOT BUILD_STATIC_LIB)
      target_link_libraries(test-${target} LLVM)
    endif()
  endfunction()

  foreach(TESTSET RANGE 5)
    add_llvm_test(codegen-${TESTSET} test_codegen.cpp)
    set_target_properties("test-codegen-${TESTSET}" PROPERTIES
      COMPILE_DEFINITIONS "IR_TESTSET=${TESTSET}")
  endforeach()
  add_llvm_test(codegen_call)
  add_llvm_test(codegen_closure)
  set_property(TARGET test-codegen_closure APPEND PROPERTY ENABLE_EXPORTS On)
  add_llvm_test(codegen_cmp)
  add_llvm_test(codegen_convert)
  add_llvm_test(codegen_dump)
  add_llvm_test(codegen_logical)
  if(ENABLE_SIMD)
    foreach(TESTSET RANGE 5)
      add_llvm_test(vec_codegen-${TESTSET} test_vec_codegen.cpp)
      set_target_properties("test-vec_codegen-${TESTSET}" PROPERTIES
        COMPILE_DEFINITIONS "IR_TESTSET=${TESTSET}")
    endforeach()
    add_llvm_test(vec_codegen_call)
    add_llvm_test(vec_codegen_cmp)
    add_llvm_test(vec_codegen_convert)
    add_llvm_test(vec_codegen_logical)
  endif()
endif()
