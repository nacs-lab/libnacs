/*************************************************************************
 *   Copyright (c) 2016 - 2016 Yichao Yu <yyc1992@gmail.com>             *
 *                                                                       *
 *   This library is free software; you can redistribute it and/or       *
 *   modify it under the terms of the GNU Lesser General Public          *
 *   License as published by the Free Software Foundation; either        *
 *   version 3.0 of the License, or (at your option) any later version.  *
 *                                                                       *
 *   This library is distributed in the hope that it will be useful,     *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of      *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU    *
 *   Lesser General Public License for more details.                     *
 *                                                                       *
 *   You should have received a copy of the GNU Lesser General Public    *
 *   License along with this library. If not,                            *
 *   see <http://www.gnu.org/licenses/>.                                 *
 *************************************************************************/

#include <nacs-seq/seq.h>
#include <nacs-seq/pulser.h>
#include <nacs-utils/timer.h>
#include <nacs-utils/log.h>
#include <nacs-utils/base64.h>

#include <math.h>
#include <inttypes.h>

using namespace NaCs;

static const auto seq_cb = [&] (auto &, uint64_t cur_t, Seq::Event evt) {
    if (evt == Seq::Event::start) {
        nacsLog("Start time: %" PRIu64 "\n", cur_t);
    } else {
        nacsLog("End time: %" PRIu64 "\n", cur_t);
    }
    return cur_t;
};

int main()
{
    uint64_t tlen = 10000000;
    // uint64_t tlen = 10000;
    Seq::PulsesBuilder builder =
        [] (Seq::Channel chn, Seq::Val val, uint64_t t) -> uint64_t {
        (void)chn;
        (void)val;
        (void)t;
        // nacsLog("t = %" PRIu64 ", chn = (%d, %d), v = %f\n",
        //         t, int(chn.typ), chn.id, val.val.f64);
        return 1;
    };
    std::vector<Seq::Pulse> seq;
    seq.push_back(Seq::Pulse{0, tlen, {Seq::Channel::DAC, 0},
                [] (auto t, auto start, auto) {
                    return Seq::Val::get<double>(start.val.f64 + (double)t);
                }});
    seq.push_back(Seq::Pulse{0, tlen, {Seq::Channel::DAC, 1},
                [] (auto t, auto start, auto) {
                    return Seq::Val::get<double>(start.val.f64 - (double)t);
                }});
    seq.push_back(Seq::Pulse{0, tlen, {Seq::Channel::DAC, 3},
                [] (auto t, auto start, auto) {
                    return Seq::Val::get<double>(start.val.f64 +
                                                 sin((double)t / 1000.0));
                }});
    seq.push_back(Seq::Pulse{5000, 0, {Seq::Channel::DAC, 2},
                Seq::Val::get<double>(20)});
    seq.push_back(Seq::Pulse{5002, 0, {Seq::Channel::DAC, 2},
                Seq::Val::get<double>(10)});
    seq.push_back(Seq::Pulse{5202, 0, {Seq::Channel::DAC, 2},
                Seq::Val::get<double>(10)});
    std::map<Seq::Channel,Seq::Val> defaults;
    builder.schedule(seq, defaults, seq_cb);

    {
        const char data[] = "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";
        assert(Base64::validate((const uint8_t*)data, strlen(data)));
        std::vector<Seq::Pulse> seq;
        std::map<Seq::Channel,Seq::Val> defaults;
        tic();
        std::tie(seq, defaults) =
            Seq::PulsesBuilder::fromBase64((const uint8_t*)data, strlen(data));
        printToc();
        tic();
        builder.schedule(seq, defaults, seq_cb);
        printToc();
    }
    return 0;
}
